# 필요한 모듈들을 임포트합니다.
from urllib.parse import quote
import requests
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from multiprocessing import Pool

# XSS 페이로드를 로드하는 함수입니다.
def load_xss_paylaods(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file]
    
def test_single_payload(args):
    url, payload = args
    try:
        # 페이로드를 URL에 추가하여 GET 요청을 보냅니다.
        # 페이로드를 URL 인코딩합니다.
        response = requests.get(url + quote(payload))

        # 페이로드가 응답에 포함되어 있는지 확인합니다.
        if payload in response.text:
            print(f"[R] {url}{quote(payload)}")

        # Selenium을 사용하여 웹 페이지를 로드하고, 페이지에 alert 창이 띄워져 있는지 확인합니다.
        # 웹드라이버 인스턴스를 각 작업마다 새로 생성합니다.
        options = FirefoxOptions()
        options.add_argument("--headless")
        driver = webdriver.Firefox(options=options)
        driver.get(url + quote(payload))
        alert_present = False
        try:
            # WebDriverWait를 사용하여 페이지가 완전히 로드될 때까지 기다립니다.
            WebDriverWait(driver, 10).until(EC.alert_is_present())
            alert_present = True
        except:
            pass
        # alert 창이 띄워져 있다면, XSS 취약점이 발견되었다고 보고합니다.
        if alert_present:
            print(f"\033[38;2;255;0;0m[V] {url}{quote(payload)}\033[0m")

        # 웹드라이버 인스턴스를 종료합니다.
        driver.quit()
    except Exception as e:
        print(f"An error occurred while testing the payload: {e}")

def test_xss(url, payloads):
    with Pool(processes=8) as pool:  # 병렬 처리할 프로세스 수를 지정합니다.
        pool.map(test_single_payload, [(url, payload) for payload in payloads])